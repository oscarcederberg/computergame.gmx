<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Window
width = 0;
height = 0;
type = "";
data = "";
file_id = noone;
surface_id = -1;

offset_x = x - view_xview[0];
offset_y = y - view_yview[0];

x0 = 0;
x1 = 16;
x2 = (width+1)*16;
x3 = (width+2)*16;
y0 = 0;
y1 = 16;
y2 = (height+1)*16;
y3 = (height+2)*16;
scroll_x = x2+3;
scroll_y = y0;

window_dragging = false;
on_exit = false;
clicked_offset_x = 0;
clicked_offset_y = 0;

offset_top = 6;
offset_side = 9;
offset_bot = 11;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scrollbar
scroll_active = false;
thumb_size = 0;
thumb_pos = 0;
steps = 0;
step_amount = 0;

scroll_offset_top = 12;
scroll_offset_bot = 11;

scroll_dragging = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Limits, Dragging, On_Exit

limit_top = 16-offset_top;
limit_left = -offset_side;
limit_right = view_wview[0]-32-width*16+offset_side;
limit_bot = view_hview[0]-32-height*16-16+offset_bot;

if(window_dragging){
    if(mouse_check_button(mb_left)){
        offset_x = clamp(mouse_x-clicked_offset_x-view_xview[0], limit_left, limit_right);
        offset_y = clamp(mouse_y-clicked_offset_y-view_yview[0], limit_top, limit_bot);
    } else {
        audio_play_sound(sfx_drop, 1, false);
        window_dragging = false
        scrollbar_x = false;
    }
} else if(on_exit){
    if(scr_is_point_inside_box(mouse_x, mouse_y, x+16+width*16, y+offset_top, 
        x+32+width*16-offset_side, y+16-3)){
        if(mouse_check_button_released(mb_left)){
            audio_play_sound(sfx_close, 1, false);
            scr_window_delete(id);
        } else if(!mouse_check_button(mb_left)){
            on_exit = false;
        }
    } else {
        on_exit = false;
    }
}

x = view_xview[0] + offset_x;
y = view_yview[0] + offset_y;

x0 = 0;
x1 = 16;
x2 = (width+1)*16;
x3 = (width+2)*16;
y0 = 0;
y1 = 16;
y2 = (height+1)*16;
y3 = (height+2)*16;
scroll_x = x2+3;
scroll_y = y0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scrollbar
if(scroll_active){
    if(scroll_dragging){
        if(mouse_check_button_released(mb_left)){
            scroll_dragging = false;
        } else{
            thumb_pos = mouse_y - scroll_y - 16 - clicked_offset_y;
        } 
    } else {
        if(mouse_wheel_up()){
            if(scr_window_is_active(id)){
                thumb_pos--;
            }
        } else if(mouse_wheel_down()){
            if(scr_window_is_active(id)){
                thumb_pos++;
            }
        }
    }
    thumb_pos = clamp(thumb_pos, 0, steps - 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Window &amp; Scrollbar
if(!surface_exists(surface_id)){
    x0 = 0;
    x1 = 16;
    x2 = (width+1)*16;
    x3 = (width+2)*16;
    y0 = 0;
    y1 = 16;
    y2 = (height+1)*16;
    y3 = (height+2)*16;
    scroll_x = x2+3;
    scroll_y = y0;
    
    surface_id = surface_create(256, 256)
    surface_set_target(surface_id);
        draw_clear_alpha(c_white, 0);
        //Window
        draw_sprite(spr_box_1_topleft, 0, x0, y0);
        draw_sprite(spr_box_1_botleft, 0, x0, y2);      
        
        draw_sprite_stretched(spr_box_1_top, 0, x1, y0, width*16, 16);
        draw_sprite_stretched(spr_box_1_left, 0, x0, y1, 16, height*16);
        draw_sprite_stretched(spr_box_1_bot, 0, x1, y2, width*16, 16);
        draw_sprite_stretched(spr_box_1_mid, 0, x1, y1, width*16, height*16);
        
        //Scrollbar
        if(scroll_active){
            draw_sprite(spr_box_1_topright_scroll, 0, x2, y0);
            draw_sprite_stretched(spr_box_1_right_scroll, 0, x2, y1, 16, height*16);
            draw_sprite(spr_box_1_botright_scroll, 0, x2, y2);
        } else{
            draw_sprite(spr_box_1_topright, 0, x2, y0);
            draw_sprite_stretched(spr_box_1_right, 0, x2, y1, 16, height*16);
            draw_sprite(spr_box_1_botright, 0, x2, y2);
        }
    surface_reset_target();
}
draw_surface(surface_id, x, y);

if(scroll_active){
    draw_sprite_stretched(spr_box_1_thumb, 0, x + scroll_x, y + scroll_y + 16 + thumb_pos, 4, thumb_size);
    draw_set_color(C_GREY);
    draw_line(x + scroll_x, y + scroll_y + 15 + thumb_pos, x + scroll_x + 3, y + scroll_y + 15 + thumb_pos);
    draw_line(x + scroll_x, y + scroll_y + 16 + thumb_size + thumb_pos, x + scroll_x + 3, y + scroll_y + 16 + thumb_size + thumb_pos);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

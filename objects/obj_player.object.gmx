<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init.

enum action {
    idle,
    moving
}

enum facing {
    up,
    left,
    right,
    down
}

currentAction = action.idle;
currentDirection = facing.down;

y=y-5;
fauxX = x+8;
fauxY = y+24;
stepsLeft = 0;
walkspeed = 6;
stepSfxIndex = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stepsLeft--;

if(stepsLeft &gt; 0){
    switch(currentDirection){
        case facing.up:
            y -= 4;
            break;
        case facing.left:
            x -= 4;
            break;
        case facing.down:
            y += 4;
            break;
        case facing.right:
            x += 4;
            break;
    }
    stepSfxIndex = scr_sfx_step(stepSfxIndex);
    alarm_set(0,60/walkspeed);
} else {
    currentAction = action.idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Faux X,Y and Depth
fauxX = x+8;
fauxY = y+24;

depth = -y-sprite_height;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input
key_up          = keyboard_check(vk_up)             || keyboard_check(ord("W"));
key_left        = keyboard_check(vk_left)           || keyboard_check(ord("A"));
key_down        = keyboard_check(vk_down)           || keyboard_check(ord("S"));
key_right       = keyboard_check(vk_right)          || keyboard_check(ord("D"));
key_interact    = keyboard_check_pressed(vk_enter)  || keyboard_check_pressed(vk_space);
key_shift       = keyboard_check(vk_shift);

//Move
if(currentAction = action.idle){
    stepsLeft = 4;
    
    if(key_shift){
        walkspeed = 8;
    } else{
        walkspeed = 6;
    }
    
    if(key_up &amp;&amp; !key_down){
        currentDirection = facing.up;
        if(!scr_is_cell_blocked(fauxX,fauxY-16)){
            currentAction = action.moving;
            y -= 4;
        } else if(!audio_is_playing(sfx_collide)) audio_play_sound(sfx_collide, 1, false);
    } else if(key_left &amp;&amp; !key_right){
        currentDirection = facing.left;
        if(!scr_is_cell_blocked(fauxX-16,fauxY)){
            currentAction = action.moving; 
            x -= 4;
        } else if(!audio_is_playing(sfx_collide)) audio_play_sound(sfx_collide, 1, false);
    } else if(key_down &amp;&amp; !key_up){
        currentDirection = facing.down;
        if(!scr_is_cell_blocked(fauxX,fauxY+16)){
            currentAction = action.moving;
            y += 4;
        } else if(!audio_is_playing(sfx_collide)) audio_play_sound(sfx_collide, 1, false);
    } else if(key_right &amp;&amp; !key_left){
        currentDirection = facing.right;
        if(!scr_is_cell_blocked(fauxX+16,fauxY)){
            currentAction = action.moving;
            x += 4;
        } else if(!audio_is_playing(sfx_collide)) audio_play_sound(sfx_collide, 1, false);
    }
    
    if(currentAction = action.moving){
        stepSfxIndex = scr_sfx_step(stepSfxIndex);
        image_index = 1;
        alarm_set(0,60/walkspeed);
    }
}

//Interact
if(currentAction = action.idle){
    if(key_interact){
        var interact_id;
        switch(currentDirection){
            case facing.up:
                interact_id = collision_point(fauxX, fauxY-16, par_interactable,false,true);
                break;
            case facing.left:
                interact_id = collision_point(fauxX-16, fauxY, par_interactable,false,true);
                break;
            case facing.down:
                interact_id = collision_point(fauxX, fauxY+16, par_interactable,false,true);
                break;
            case facing.right:
                interact_id = collision_point(fauxX+16, fauxY, par_interactable,false,true);
                break;
        }
        if(interact_id != noone){
            audio_play_sound(sfx_open, 1, false);
            scr_interact(interact_id);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Direction

if(currentAction = action.idle){
    image_index = 0;
    image_speed = 0;
} else {
    image_speed = walkspeed/60;
}

if(currentDirection == facing.down)
{
    sprite_index = spr_player_down;
}
else if(currentDirection == facing.up)
{
    sprite_index = spr_player_up;
}
else if(currentDirection == facing.right)
{
    sprite_index = spr_player_right;
}
else if(currentDirection == facing.left)
{
    sprite_index = spr_player_left;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
